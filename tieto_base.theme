<?php

/**
 * @file
 * Code for Tieto Base theme.
 *
 * @todo This is all copied from Bootstrap Barrio. Refactor this!
 * @see https://www.drupal.org/project/bootstrap_barrio
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;

// @todo move to theme settings.
define('SIDEBAR_BOTH_WIDTH', 2);
define('SIDEBAR_SINGLE_WIDTH', 3);
define('GRID_COLUMNS', 12);

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function tieto_base_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  // Page specific info
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }

  // SEO Information
  $http_equiv = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ),
  );
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function tieto_base_preprocess_page(&$variables) {

  // @todo Move widths to theme_settings and configs!
  // @fixme Fix classes, use pulls, pushes and offsets.
  // If both are present, they are 2 wide.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $sidebars_width = SIDEBAR_BOTH_WIDTH;
  }
  // If any of them is present, it is 3 wide.
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['page']['sidebar_first']['#attributes'] = new Attribute([
      'class' => ['col-md-' . SIDEBAR_SINGLE_WIDTH]
    ]);
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['page']['sidebar_second']['#attributes'] = new Attribute([
      'class' => ['col-md-' . SIDEBAR_SINGLE_WIDTH]
    ]);
  }

  $main_width = _tieto_base_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']));
  $variables['main_attributes'] = new Attribute([
    'class' => ['col-md-' . $main_width],
  ]);
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function tieto_base_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }

  // if (!strlen($variables['title']['#markup'])) {
  //   $variables['title']['#markup'] = Drupal::config('system.site')->get('name');
  // }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function tieto_base_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bootstrap Barrio has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'tieto_base/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function tieto_base_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function tieto_base_preprocess_block__system_breadcrumb_block(&$variables) {
  // Remove 'Home' from the Breadcrumbs.
  // @todo Optionally show all crumbs, but use <span> for the Current item.
  $links = &$variables['content']['#links'];
  if ($links[0]->getUrl()->getRouteName() === '<front>') {
    array_shift($links);
  }
}

function tieto_base_preprocess_form_element(&$variables) {
  if (is_object($variables['label']['#title'])) {
    $variables['input_title'] = $variables['label']['#title']->render();
  }
  $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
}

function tieto_base_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  if ($variables['element']['#active']) {
    $variables['link']['#options']['attributes']['class'][] = 'active';
  }
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function tieto_base_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // ToDo get from core a variable to flag inline links
  if ( in_array('inline', $variables['attributes']['class']) ) {
    $suggestions[] = 'links__inline';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function tieto_base_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Returns width of content region.
 *
 * Calculates content width based on first and second column width parameters.
 */
function _tieto_base_content_width($first = FALSE, $second = FALSE) {
  $content_offset = 0;

  $sidebar_width = ($first && $second) ? SIDEBAR_BOTH_WIDTH : SIDEBAR_SINGLE_WIDTH;
  $sidebar_first_width = ($first) ? $sidebar_width : 0;
  $sidebar_first_offset = 0;

  $sidebar_second_width = ($second) ? $sidebar_width : 0;
  $sidebar_second_offset = 0;

  $content_width = GRID_COLUMNS - $content_offset - $sidebar_first_width - $sidebar_first_offset - $sidebar_second_width - $sidebar_second_offset;

  return $content_width;
}
