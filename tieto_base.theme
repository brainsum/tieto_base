<?php

/**
 * @file
 * Code for Tieto Base theme.
 *
 * @todo This is all copied from Bootstrap Barrio. Refactor this!
 * @see https://www.drupal.org/project/bootstrap_barrio
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

// @todo move to theme settings.
define('SIDEBAR_BOTH_WIDTH', 3);
define('SIDEBAR_SINGLE_WIDTH', 3);
define('GRID_COLUMNS', 12);

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  // Page specific info
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }

  // SEO Information
  $http_equiv = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ),
  );
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_page(&$variables) {

  // @todo Move widths to theme_settings and configs!
  // @fixme Fix classes, use pulls, pushes and offsets.
  // If both are present, they are 2 wide.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['page']['sidebar_first']['#attributes']['class'][] = 'col-md-' . SIDEBAR_BOTH_WIDTH;
    $variables['page']['sidebar_second']['#attributes']['class'][] = 'col-md-' . SIDEBAR_BOTH_WIDTH;
  }
  // If any of them is present, it is 3 wide.
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['page']['sidebar_first']['#attributes']['class'][] = 'col-md-' . SIDEBAR_SINGLE_WIDTH;
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['page']['sidebar_second']['#attributes']['class'][] = 'col-md-' . SIDEBAR_SINGLE_WIDTH;
  }

  $main_width = _tieto_base_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']));
  $variables['content_attributes'] = new Attribute([
    'class' => ['col-md-' . $main_width],
  ]);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_block__system_breadcrumb_block(&$variables) {
  // Remove 'Home' from the Breadcrumbs.
  // @todo Optionally show all crumbs, but use <span> for the Current item.
  $links = &$variables['content']['#links'];
  if ($links[0]->getUrl()->getRouteName() === '<front>') {
    array_shift($links);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_menu_local_action(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--green';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_details(&$variables) {
  $variables['is_open'] = $variables['element']['#open'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  if (isset($variables['element']['#active']) && $variables['element']['#active']) {
    $variables['link']['#options']['attributes']['class'][] = 'active';
  }
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_region__footer(&$variables) {
  $variables['site_name'] = Drupal::config('system.site')->get('name');
}

/**
 * Implements template_preprocess_views_view_grid().
 */
function tieto_base_preprocess_views_view_unformatted(&$variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tieto_base_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  $suggestions[] = 'views_view__' . $view->id();
  $suggestions[] = 'views_view__' . $view->current_display;
  $suggestions[] = 'views_view__' . $view->id() . '__' . $view->current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tieto_base_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  $suggestions[] = 'views_view_fields__' . $view->id();
  $suggestions[] = 'views_view_fields__' . $view->current_display;
  $suggestions[] = 'views_view_fields__' . $view->id() . '__' . $view->current_display;
}

/**
 * Implements hook_form_alter().
 */
function tieto_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add layout type and form_id to children elements.
  tieto_base_attach_form_id($form, $form_id);
}

/**
 * Attaches form id to all form elements.
 *
 * @param $element
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 * @param $is_inline
 *   Stacked or inline, see Bootstrap 4 Forms.
 *
 * @return array
 */
function tieto_base_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    tieto_base_attach_form_id($form[$child], $form_id);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tieto_base_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

/**
 * Implements hook_theme_suggestions_form_element().
 */
function themable_forms_theme_suggestions_form_element(array $variables) {
  $suggestions = ['form_element'];
  $suggestions[] = 'form_element__' . $variables['element']['#type'];
  if (isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element__' . $variables['element']['#form_id'] . '__' . $variables['element']['#type'];
  }
  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_form(&$variables) {
  if (in_array($variables['element']['#form_id'], _tieto_base_inline_forms())) {
    $variables['attributes']['class'][] = 'form-inline';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function tieto_base_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    $variables['input_title'] = $variables['label']['#title'];
  }
  if (isset($variables['element']['#form_id'])) {
    $variables['label']['#form_id'] = $variables['element']['#form_id'];
    $variables['inline_form'] = in_array($variables['element']['#form_id'], _tieto_base_inline_forms());
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
  $variables['label']['#form_element_type'] = $variables['element']['#type'];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @todo Use unified responsive classes instead of redeclaring this hook.
 */
function tieto_base_preprocess_form_element_label(&$variables) {
  if (isset($variables['element']['#form_id'])) {
    $variables['inline_form'] = in_array($variables['element']['#form_id'], _tieto_base_inline_forms());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @todo Use unified responsive classes instead of redeclaring this hook.
 */
function tieto_base_preprocess_fieldset(&$variables) {
  if (isset($variables['element']['#form_id'])) {
    $variables['inline_form'] = in_array($variables['element']['#form_id'], _tieto_base_inline_forms());
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @todo Use unified responsive classes instead of redeclaring this hook.
 */
function tieto_base_preprocess_datetime_wrapper(&$variables) {
  if (isset($variables['element']['#form_id'])) {
    $variables['inline_form'] = in_array($variables['element']['#form_id'], _tieto_base_inline_forms());
  }
  // @fixme Rewrite this mess!
  if (isset($variables['description'])) {
    $classes = ['form-description'];
    if ($variables['inline_form']) {
      $classes[] = 'col-sm-8 col-md-10';
    }
    $variables['description_attributes'] = new Attribute([
      'id' => $variables['element']['#id'] . '-value--description',
      'class' => $classes,
    ]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @todo Use unified responsive classes instead of redeclaring this hook.
 */
function tieto_base_preprocess_container(&$variables) {
  if (isset($variables['element']['#form_id'])) {
    $variables['inline_form'] = in_array($variables['element']['#form_id'], _tieto_base_inline_forms());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function tieto_base_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#form_element_type']) && isset($variables['element']['#form_id'])) {
    $suggestions[] = 'form_element_label__type__' . $variables['element']['#form_element_type'];
    $suggestions[] = 'form_element_label__' . $variables['element']['#form_id'];
    $suggestions[] = 'form_element_label__' . $variables['element']['#form_id'] . '__' . $variables['element']['#form_element_type'];
  }
}

/**
 * Returns width of content region.
 *
 * Calculates content width based on first and second column width parameters.
 */
function _tieto_base_content_width($first = FALSE, $second = FALSE) {
  $content_offset = 0;

  $sidebar_width = ($first && $second) ? SIDEBAR_BOTH_WIDTH : SIDEBAR_SINGLE_WIDTH;
  $sidebar_first_width = ($first) ? $sidebar_width : 0;
  $sidebar_first_offset = 0;

  $sidebar_second_width = ($second) ? $sidebar_width : 0;
  $sidebar_second_offset = 0;

  $content_width = GRID_COLUMNS - $content_offset - $sidebar_first_width - $sidebar_first_offset - $sidebar_second_width - $sidebar_second_offset;

  return $content_width;
}

function _tieto_base_inline_forms() {
  $cached = &drupal_static(__FUNCTION__);
  return isset($cached) ? $cached : [
    // 'user_form',
    'views_exposed_form',
    'marketing_activity_marketing_activation_form_add_form',
    'marketing_activity_marketing_activation_form_edit_form',
    'marketing_activity_marketo_support_form_add_form',
    'marketing_activity_marketo_support_form_edit_form',
  ];
}

/**
 * Implements hook_preprocess().
 */
function tieto_base_preprocess(&$variables, $hook) {
  // Attach path variables to the base theme for all templates.
  // Useful for including partials, because `directory` only refers to the
  // path of the current theme, so in sub-themes it will not work as expected.
  // @todo Should I use drupal_static here?
  global $base_path;
  $base_theme_path = $base_path . drupal_get_path('theme', 'tieto_base');
  $variables['base_theme_path'] = $base_theme_path;
  $variables['templates'] = $base_theme_path . '/templates';
  $variables['partials'] = $base_theme_path . '/templates/_partials';
  $variables['images'] = $base_theme_path . '/img';

  // This will always refer to the default system theme.
  $variables['theme_path'] = $base_path . $variables['directory'];
}
