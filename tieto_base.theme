<?php

/**
 * @file
 * Code for Tieto Base theme.
 *
 * @todo This is all copied from Bootstrap Barrio. Refactor this!
 * @see https://www.drupal.org/project/bootstrap_barrio
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function tieto_base_preprocess_html(&$variables) {
  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  // Page specific info
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }

  // SEO Information
  $http_equiv = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ),
  );
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function tieto_base_preprocess_page(&$variables) {

  $width = _tieto_base_content_width(!empty($variables['page']['sidebar_first']), !empty($variables['page']['sidebar_second']));
  $content_width = 'col-md-' . $width;
  $sidebar_first_width = 'col-md-3';
  $sidebar_second_width = 'col-md-3';

  // Define default classes for containers

  $variables['sidebar_first_attributes'] = array(
    'class' => array (
      'sidebar',
    $sidebar_first_width
  ),
  'id' => array ( 'sidebar_first' ),
  );
  $variables['sidebar_second_attributes'] = array(
    'class' => array (
      'sidebar',
      $sidebar_second_width ),
    'id' => array ( 'sidebar_second' ),
  );

  // Define column layout classes
  // if (!empty($variables['page']['sidebar_first'])) {
  //   $variables['content_attributes']['class'][] = 'col-md-push-3';
  // }
  // $variables['sidebar_first_attributes']['class'][] = 'col-md-pull-' . $width;

  // Declare region attributes
  // $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_first_attributes'] = new Attribute($variables['sidebar_first_attributes']);
  $variables['sidebar_second_attributes'] = new Attribute($variables['sidebar_second_attributes']);
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function tieto_base_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }

  // if (!strlen($variables['title']['#markup'])) {
  //   $variables['title']['#markup'] = Drupal::config('system.site')->get('name');
  // }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function tieto_base_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Bootstrap Barrio has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'tieto_base/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function tieto_base_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function tieto_base_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  // if ($variables['plugin_id'] == 'system_branding_block') {
  //   $variables['attributes']['class'][] = 'clearfix';
  // }
}

function tieto_base_preprocess_form_element(&$variables) {
  if (is_object($variables['label']['#title'])) {
    $variables['input_title'] = $variables['label']['#title']->render();
  }
  $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function tieto_base_preprocess_menu(&$variables) {
  // kint($variables);

}

function tieto_base_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  if ($variables['element']['#active']) {
    $variables['link']['#options']['attributes']['class'][] = 'active';
  }
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function tieto_base_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // ToDo get from core a variable to flag inline links
  if ( in_array('inline', $variables['attributes']['class']) ) {
    $suggestions[] = 'links__inline';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function tieto_base_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Implements hook_preprocess_input() to add classes to inputs.
 */
function tieto_base_preprocess_input(&$variables) {
  if ($variables['element']['#type'] == 'submit') {
    if (is_object($variables['attributes']['class'])) {
      if (empty(array_intersect(array('btn-primary', 'btn-secondary', 'btn-success', 'btn-warning', 'btn-danger', 'btn-link'), $variables['attributes']['class']->value()))) {
        $variables['attributes']['class']->addClass('btn-primary');
      }
      if ( !in_array( 'btn', $variables['attributes']['class']->value() ) ) {
        $variables['attributes']['class']->addClass('btn');
      }
    }
    else {
      $variables['attributes']['class'][] = 'btn';
      $variables['attributes']['class'][] = 'btn-primary';
      $variables['attributes'] = new Attribute( $variables['attributes'] );
    }
  }
}

/**
 * Returns width of content region.
 *
 * Calculates content width based on first and second column width parameters.
 */
function _tieto_base_content_width($first = 0, $second = 0) {
  $content_offset = 0;
  $sidebar_first_width = ( $first ) ? 3 : 0;
  $sidebar_first_offset = 0;
  $sidebar_second_width = ( $second ) ? 3 : 0;
  $sidebar_second_offset = 0;
  $content_width = 12 - $content_offset - $sidebar_first_width - $sidebar_first_offset - $sidebar_second_width - $sidebar_second_offset;
  return $content_width;
}
